<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>rocksdb-continuous-benchmark</artifactId>
        <groupId>com.evolvedbinary.rocksdb.cb</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>github-webhook</artifactId>

    <name>RocksDB Continuous Benchmarks - GitHub WebHook</name>

    <properties>
        <!-- properties for Self-Signed SSL certificate generation -->
        <keytool.generated-resources.dir>${project.build.directory}/generated-resources/keytool</keytool.generated-resources.dir>
        <root.alias>ss-root</root.alias>
        <root.keystore.path>${project.build.directory}/ss-root.p12</root.keystore.path>
        <root.keystore.pass>root-store-secret</root.keystore.pass>
        <root.certificate.path>${project.build.directory}/ss-root.pem</root.certificate.path>
        <ca.alias>ss-ca</ca.alias>
        <ca.keystore.path>${project.build.directory}/ss-ca.p12</ca.keystore.path>
        <ca.keystore.pass>ca-store-secret</ca.keystore.pass>
        <ca.certificate.path>${project.build.directory}/ss-ca.pem</ca.certificate.path>
        <server.alias>ss-server</server.alias>
        <server.keystore.path>${keytool.generated-resources.dir}/ss-keystore.p12</server.keystore.path>
        <server.keystore.pass>server-store-secret</server.keystore.pass>
        <server.certificate.path>${project.build.directory}/ss-keystore.pem</server.certificate.path>
        <key.algorithm>RSA</key.algorithm>
        <key.size>2048</key.size>
        <keystore.type>PKCS12</keystore.type>
        <certificate.validity>1825</certificate.validity>   <!-- 5 years -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.63.Final</version>
        </dependency>
        <dependency>
            <groupId>se.softhouse</groupId>
            <artifactId>jargo</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>net.jcip</groupId>
            <artifactId>jcip-annotations</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-jms-client</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>runtime</scope>
        </dependency>


        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>test-util</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-migrationsupport</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.4.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <profiles>
        <profile>
            <!-- Generate Self-signed SSL Certificate for testing -->
            <id>self-signed-ssl-certificate</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/resources</directory>
                    </testResource>
                    <testResource>
                        <directory>${keytool.generated-resources.dir}</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>com.evolvedbinary.thirdparty.org.codehaus.mojo</groupId>
                        <artifactId>keytool-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <id>generate-root-key</id>
                                <goals>
                                    <goal>generateKeyPair</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${root.alias}</alias>
                                    <dname>CN=Self-Signed Root Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                                    <validity>${certificate.validity}</validity>
                                    <keyalg>${key.algorithm}</keyalg>
                                    <keysize>${key.size}</keysize>
                                    <exts>
                                        <ext>bc:c</ext>
                                    </exts>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${root.keystore.path}</keystore>
                                    <storepass>${root.keystore.pass}</storepass>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-ca-key</id>
                                <goals>
                                    <goal>generateKeyPair</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${ca.alias}</alias>
                                    <dname>CN=Self-Signed CA Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                                    <validity>${certificate.validity}</validity>
                                    <keyalg>${key.algorithm}</keyalg>
                                    <keysize>${key.size}</keysize>
                                    <exts>
                                        <ext>bc:c</ext>
                                    </exts>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${ca.keystore.path}</keystore>
                                    <storepass>${ca.keystore.pass}</storepass>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-root-certificate</id>
                                <goals>
                                    <goal>exportCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${root.alias}</alias>
                                    <rfc>true</rfc>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${root.keystore.path}</keystore>
                                    <storepass>${root.keystore.pass}</storepass>
                                    <file>${root.certificate.path}</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-ca-certificate-request</id>
                                <goals>
                                    <goal>generateCertificateRequest</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${ca.alias}</alias>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${ca.keystore.path}</keystore>
                                    <storepass>${ca.keystore.pass}</storepass>
                                    <file>${ca.certificate.path}.req</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-ca-certificate</id>
                                <goals>
                                    <goal>generateCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${root.alias}</alias>
                                    <validity>${certificate.validity}</validity>
                                    <rfc>true</rfc>
                                    <exts>
                                        <ext>bc=0</ext>
                                        <ext>SAN=DNS:ca</ext>
                                    </exts>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${root.keystore.path}</keystore>
                                    <storepass>${root.keystore.pass}</storepass>
                                    <infile>${ca.certificate.path}.req</infile>
                                    <outfile>${ca.certificate.path}</outfile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>import-root-certificate-into-ca</id>
                                <goals>
                                    <goal>importCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${root.alias}</alias>
                                    <trustcacerts>true</trustcacerts>
                                    <noprompt>true</noprompt>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${ca.keystore.path}</keystore>
                                    <storepass>${ca.keystore.pass}</storepass>
                                    <file>${root.certificate.path}</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>import-ca-certificate-into-ca</id>
                                <goals>
                                    <goal>importCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${ca.alias}</alias>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${ca.keystore.path}</keystore>
                                    <storepass>${ca.keystore.pass}</storepass>
                                    <file>${ca.certificate.path}</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-server-key</id>
                                <goals>
                                    <goal>generateKeyPair</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${server.alias}</alias>
                                    <dname>CN=Self-Signed SSL Certificate, OU=Release Team, O=Evolved Binary, L=London, S=London, C=GB</dname>
                                    <validity>${certificate.validity}</validity>
                                    <keyalg>${key.algorithm}</keyalg>
                                    <keysize>${key.size}</keysize>
                                    <exts>
                                        <ext>bc:c</ext>
                                    </exts>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${server.keystore.path}</keystore>
                                    <storepass>${server.keystore.pass}</storepass>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-server-certificate-request</id>
                                <goals>
                                    <goal>generateCertificateRequest</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${server.alias}</alias>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${server.keystore.path}</keystore>
                                    <storepass>${server.keystore.pass}</storepass>
                                    <file>${server.certificate.path}.req</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-server-certificate</id>
                                <goals>
                                    <goal>generateCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${ca.alias}</alias>
                                    <validity>${certificate.validity}</validity>
                                    <rfc>true</rfc>
                                    <exts>
                                        <ext>ku:c=dig,keyEnc</ext>
                                        <ext>SAN=IP:127.0.0.1,DNS:localhost</ext>
                                        <ext>eku=sa,ca</ext>
                                    </exts>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${ca.keystore.path}</keystore>
                                    <storepass>${ca.keystore.pass}</storepass>
                                    <infile>${server.certificate.path}.req</infile>
                                    <outfile>${server.certificate.path}</outfile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>import-root-certificate-into-server</id>
                                <goals>
                                    <goal>importCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${root.alias}</alias>
                                    <trustcacerts>true</trustcacerts>
                                    <noprompt>true</noprompt>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${server.keystore.path}</keystore>
                                    <storepass>${server.keystore.pass}</storepass>
                                    <file>${root.certificate.path}</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>import-ca-certificate-into-server</id>
                                <goals>
                                    <goal>importCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${ca.alias}</alias>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${server.keystore.path}</keystore>
                                    <storepass>${server.keystore.pass}</storepass>
                                    <file>${ca.certificate.path}</file>
                                </configuration>
                            </execution>
                            <execution>
                                <id>import-server-certificate-into-server</id>
                                <goals>
                                    <goal>importCertificate</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <alias>${server.alias}</alias>
                                    <storetype>${keystore.type}</storetype>
                                    <keystore>${server.keystore.path}</keystore>
                                    <storepass>${server.keystore.pass}</storepass>
                                    <file>${server.certificate.path}</file>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>docker-github-webhook</id>
            <activation>
                <property>
                    <name>docker</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>appassembler-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>assemble</goal>
                                </goals>
                                <configuration>
                                    <repositoryLayout>flat</repositoryLayout>
                                    <repositoryName>lib</repositoryName>
                                    <binFileExtensions>
                                        <unix>.sh</unix>
                                    </binFileExtensions>
                                    <programs>
                                        <program>
                                            <id>github-webhook</id>
                                            <mainClass>com.evolvedbinary.rocksdb.cb.github.Main</mainClass>
                                        </program>
                                    </programs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <verbose>true</verbose>
                            <images>
                                <image>
                                    <name>evolvedbinary/cb-github-webhook:%v</name>
                                    <alias>cb-github-webhook</alias>
                                    <build>
                                        <tags>
                                            <tag>latest</tag>
                                        </tags>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                        <contextDir>${project.build.directory}/appassembler</contextDir>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>build-docker-github-webhook-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>push-docker-github-webhook-image</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>